import { useState, useEffect } from 'react';\nimport reviewService from '../services/reviewService';\n\nexport const useTeachers = () => {\n  const [teachers, setTeachers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchTeachers = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await reviewService.getTeachers();\n      if (response.success) {\n        setTeachers(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch teachers');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitReview = async (reviewData) => {\n    try {\n      const response = await reviewService.submitTeacherReview(reviewData);\n      if (response.success) {\n        // Refresh teachers list\n        fetchTeachers();\n        return { \n          success: true, \n          message: 'Review submitted successfully!',\n          moderation: response.moderation\n        };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to submit review' };\n    }\n  };\n\n  const voteOnReview = async (reviewId, voteType) => {\n    try {\n      const response = await reviewService.voteOnReview(reviewId, voteType);\n      if (response.success) {\n        // Update local state\n        setTeachers(prev => prev.map(teacher => ({\n          ...teacher,\n          recentReviews: teacher.recentReviews.map(review =>\n            review.id === reviewId\n              ? {\n                  ...review,\n                  [voteType === 'helpful' ? 'helpful' : 'notHelpful']: \n                    review[voteType === 'helpful' ? 'helpful' : 'notHelpful'] + 1\n                }\n              : review\n          )\n        })));\n        return { success: true, message: 'Vote recorded!' };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to record vote' };\n    }\n  };\n\n  const reportReview = async (reviewId, reason) => {\n    try {\n      const response = await reviewService.reportReview(reviewId, reason);\n      if (response.success) {\n        return { success: true, message: 'Review reported successfully' };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to report review' };\n    }\n  };\n\n  useEffect(() => {\n    fetchTeachers();\n  }, []);\n\n  return {\n    teachers,\n    loading,\n    error,\n    fetchTeachers,\n    submitReview,\n    voteOnReview,\n    reportReview\n  };\n};\n\nexport const useTeacherAnalytics = (teacherId) => {\n  const [analytics, setAnalytics] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchAnalytics = async () => {\n    if (!teacherId) return;\n    \n    setLoading(true);\n    setError(null);\n    try {\n      const response = await reviewService.getTeacherAnalytics(teacherId);\n      if (response.success) {\n        setAnalytics(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch analytics');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAnalytics();\n  }, [teacherId]);\n\n  return {\n    analytics,\n    loading,\n    error,\n    fetchAnalytics\n  };\n};"