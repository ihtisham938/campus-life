import { useState, useEffect } from 'react';\nimport courseService from '../services/courseService';\n\nexport const useCourses = () => {\n  const [courses, setCourses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchCourses = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await courseService.getCourses();\n      if (response.success) {\n        setCourses(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch courses');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitRating = async (ratingData) => {\n    try {\n      const response = await courseService.submitCourseRating(ratingData);\n      if (response.success) {\n        // Refresh courses list\n        fetchCourses();\n        return { \n          success: true, \n          message: 'Course rating submitted successfully!'\n        };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to submit rating' };\n    }\n  };\n\n  const getCoursesByDepartment = (department) => {\n    return courses.filter(course => course.department === department);\n  };\n\n  const getTopRatedCourses = (limit = 5) => {\n    return [...courses]\n      .sort((a, b) => b.overallRating - a.overallRating)\n      .slice(0, limit);\n  };\n\n  const searchCourses = (query) => {\n    return courses.filter(course => \n      course.name.toLowerCase().includes(query.toLowerCase()) ||\n      course.code.toLowerCase().includes(query.toLowerCase()) ||\n      course.instructor.toLowerCase().includes(query.toLowerCase()) ||\n      course.department.toLowerCase().includes(query.toLowerCase())\n    );\n  };\n\n  useEffect(() => {\n    fetchCourses();\n  }, []);\n\n  return {\n    courses,\n    loading,\n    error,\n    fetchCourses,\n    submitRating,\n    getCoursesByDepartment,\n    getTopRatedCourses,\n    searchCourses\n  };\n};\n\nexport const useCourseAnalytics = (courseId) => {\n  const [analytics, setAnalytics] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchAnalytics = async () => {\n    if (!courseId) return;\n    \n    setLoading(true);\n    setError(null);\n    try {\n      const response = await courseService.getCourseAnalytics(courseId);\n      if (response.success) {\n        setAnalytics(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch analytics');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAnalytics();\n  }, [courseId]);\n\n  return {\n    analytics,\n    loading,\n    error,\n    fetchAnalytics\n  };\n};\n\nexport const useCourseComparison = () => {\n  const [comparison, setComparison] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const compareCourses = async (courseIds) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await courseService.compareCourses(courseIds);\n      if (response.success) {\n        setComparison(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to compare courses');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearComparison = () => {\n    setComparison(null);\n  };\n\n  return {\n    comparison,\n    loading,\n    error,\n    compareCourses,\n    clearComparison\n  };\n};\n\nexport const useSyllabusFeedback = (courseId) => {\n  const [feedback, setFeedback] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchFeedback = async () => {\n    if (!courseId) return;\n    \n    setLoading(true);\n    setError(null);\n    try {\n      const response = await courseService.getSyllabusFeedback(courseId);\n      if (response.success) {\n        setFeedback(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch syllabus feedback');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitFeedback = async (feedbackData) => {\n    try {\n      const response = await courseService.submitSyllabusFeedback(courseId, feedbackData);\n      if (response.success) {\n        // Refresh feedback\n        fetchFeedback();\n        return { success: true, message: 'Feedback submitted successfully!' };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to submit feedback' };\n    }\n  };\n\n  useEffect(() => {\n    fetchFeedback();\n  }, [courseId]);\n\n  return {\n    feedback,\n    loading,\n    error,\n    fetchFeedback,\n    submitFeedback\n  };\n};"