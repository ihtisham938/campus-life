import { useState, useEffect } from 'react';\nimport eventService from '../services/eventService';\n\nexport const useEvents = () => {\n  const [events, setEvents] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchEvents = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await eventService.getEvents();\n      if (response.success) {\n        setEvents(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch events');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const proposeEvent = async (eventData) => {\n    try {\n      const response = await eventService.proposeEvent(eventData);\n      if (response.success) {\n        // Refresh events list\n        fetchEvents();\n        return { \n          success: true, \n          message: 'Event proposal submitted successfully!',\n          hasConflict: response.hasConflict,\n          conflictDetails: response.conflictDetails\n        };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to submit event proposal' };\n    }\n  };\n\n  const voteOnEvent = async (eventId, voteType) => {\n    try {\n      const response = await eventService.voteOnEvent(eventId, voteType);\n      if (response.success) {\n        // Update local state\n        setEvents(prev => prev.map(event => \n          event.id === eventId\n            ? { \n                ...event, \n                votes: {\n                  ...event.votes,\n                  [voteType]: event.votes[voteType] + 1\n                }\n              }\n            : event\n        ));\n        return { success: true, message: `Vote recorded successfully!` };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to record vote' };\n    }\n  };\n\n  const submitFeedback = async (eventId, feedback) => {\n    try {\n      const response = await eventService.submitFeedback(eventId, feedback);\n      if (response.success) {\n        return { success: true, message: 'Feedback submitted successfully!' };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to submit feedback' };\n    }\n  };\n\n  const getEventsByStatus = (status) => {\n    return events.filter(event => event.status === status);\n  };\n\n  const getEventsByCategory = (category) => {\n    return events.filter(event => event.category === category);\n  };\n\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n\n  return {\n    events,\n    loading,\n    error,\n    fetchEvents,\n    proposeEvent,\n    voteOnEvent,\n    submitFeedback,\n    getEventsByStatus,\n    getEventsByCategory\n  };\n};\n\nexport const useEventAnalytics = (eventId) => {\n  const [analytics, setAnalytics] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchAnalytics = async () => {\n    if (!eventId) return;\n    \n    setLoading(true);\n    setError(null);\n    try {\n      const response = await eventService.getEventAnalytics(eventId);\n      if (response.success) {\n        setAnalytics(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch analytics');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAnalytics();\n  }, [eventId]);\n\n  return {\n    analytics,\n    loading,\n    error,\n    fetchAnalytics\n  };\n};"