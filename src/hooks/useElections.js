import { useState, useEffect } from 'react';\nimport electionService from '../services/electionService';\n\nexport const useElections = () => {\n  const [elections, setElections] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchElections = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await electionService.getElections();\n      if (response.success) {\n        setElections(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch elections');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const castVote = async (electionId, candidateId) => {\n    try {\n      const response = await electionService.castVote(electionId, candidateId);\n      if (response.success) {\n        // Update local state\n        setElections(prev => prev.map(election => \n          election.id === electionId\n            ? {\n                ...election,\n                votedCount: election.votedCount + 1,\n                candidates: election.candidates.map(candidate =>\n                  candidate.id === candidateId\n                    ? { ...candidate, votes: candidate.votes + 1 }\n                    : candidate\n                )\n              }\n            : election\n        ));\n        return { success: true, message: 'Vote cast successfully!' };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to cast vote' };\n    }\n  };\n\n  const registerCandidate = async (electionId, candidateData) => {\n    try {\n      const response = await electionService.registerCandidate(electionId, candidateData);\n      if (response.success) {\n        return { success: true, message: 'Candidate registration submitted!' };\n      } else {\n        return { success: false, error: response.error };\n      }\n    } catch (err) {\n      return { success: false, error: 'Failed to register candidate' };\n    }\n  };\n\n  useEffect(() => {\n    fetchElections();\n  }, []);\n\n  return {\n    elections,\n    loading,\n    error,\n    fetchElections,\n    castVote,\n    registerCandidate\n  };\n};\n\nexport const useElection = (electionId) => {\n  const [election, setElection] = useState(null);\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchElection = async () => {\n    if (!electionId) return;\n    \n    setLoading(true);\n    setError(null);\n    try {\n      const response = await electionService.getElection(electionId);\n      if (response.success) {\n        setElection(response.data);\n      } else {\n        setError(response.error);\n      }\n    } catch (err) {\n      setError('Failed to fetch election details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchResults = async () => {\n    if (!electionId) return;\n    \n    try {\n      const response = await electionService.getResults(electionId);\n      if (response.success) {\n        setResults(response.data);\n      }\n    } catch (err) {\n      console.error('Failed to fetch results:', err);\n    }\n  };\n\n  useEffect(() => {\n    fetchElection();\n  }, [electionId]);\n\n  // Poll for real-time results if election is active\n  useEffect(() => {\n    if (election && election.status === 'active') {\n      const interval = setInterval(fetchResults, 5000); // Poll every 5 seconds\n      return () => clearInterval(interval);\n    }\n  }, [election]);\n\n  return {\n    election,\n    results,\n    loading,\n    error,\n    fetchElection,\n    fetchResults\n  };\n};"