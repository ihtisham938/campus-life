// Event Service - Handles all event-related API calls and data management

class EventService {
  constructor() {
    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';
  }

  // Get all events
  async getEvents() {
    try {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            success: true,
            data: this.getMockEvents()\n          });\n        }, 500);\n      });\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Submit event proposal\n  async proposeEvent(eventData) {\n    try {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          // Simulate conflict detection\n          const hasConflict = this.detectScheduleConflict(eventData);\n          resolve({\n            success: true,\n            message: 'Event proposal submitted successfully',\n            eventId: `event_${Date.now()}`,\n            hasConflict,\n            conflictDetails: hasConflict ? 'Overlaps with midterm examination period' : null\n          });\n        }, 800);\n      });\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Vote on event\n  async voteOnEvent(eventId, voteType, feedback = '') {\n    try {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            success: true,\n            message: `Vote (${voteType}) recorded successfully`,\n            voteId: `vote_${Date.now()}`\n          });\n        }, 400);\n      });\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Submit feedback\n  async submitFeedback(eventId, feedback) {\n    try {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            success: true,\n            message: 'Feedback submitted successfully',\n            feedbackId: `feedback_${Date.now()}`\n          });\n        }, 300);\n      });\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Detect schedule conflicts\n  detectScheduleConflict(eventData) {\n    // Simulate conflict detection logic\n    const examPeriods = [\n      { start: new Date('2024-03-18'), end: new Date('2024-03-25') },\n      { start: new Date('2024-05-06'), end: new Date('2024-05-13') }\n    ];\n    \n    const eventStart = new Date(eventData.startDate);\n    const eventEnd = new Date(eventData.endDate);\n    \n    return examPeriods.some(period => \n      (eventStart >= period.start && eventStart <= period.end) ||\n      (eventEnd >= period.start && eventEnd <= period.end)\n    );\n  }\n\n  // Get event analytics\n  async getEventAnalytics(eventId) {\n    try {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            success: true,\n            data: {\n              eventId,\n              totalVotes: 57,\n              approvalRate: 78.9,\n              feedbackCount: 23,\n              demographicBreakdown: {\n                byYear: {\n                  '1st Year': 12,\n                  '2nd Year': 18,\n                  '3rd Year': 15,\n                  '4th Year': 12\n                },\n                byProgram: {\n                  'Computer Science': 15,\n                  'Business': 12,\n                  'Engineering': 18,\n                  'Arts': 8,\n                  'Science': 4\n                }\n              }\n            }\n          });\n        }, 600);\n      });\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Mock data for development\n  getMockEvents() {\n    return [\n      {\n        id: 1,\n        title: 'Annual Tech Symposium',\n        description: 'A day-long symposium featuring industry speakers and student presentations.',\n        proposedBy: 'Dr. Sarah Johnson',\n        userType: 'faculty',\n        startDate: new Date('2024-03-15T09:00:00'),\n        endDate: new Date('2024-03-15T17:00:00'),\n        location: 'Main Auditorium',\n        category: 'Academic',\n        votes: { yes: 45, no: 12 },\n        hasConflict: false,\n        status: 'voting',\n        feedback: [\n          {\n            id: 1,\n            user: 'Anonymous Student',\n            comment: 'Great initiative! Would love to see more industry connections.',\n            timestamp: new Date('2024-02-10T14:30:00')\n          }\n        ]\n      },\n      {\n        id: 2,\n        title: 'Spring Cultural Festival',\n        description: 'Cultural performances, food stalls, and art exhibitions.',\n        proposedBy: 'Student Council',\n        userType: 'student',\n        startDate: new Date('2024-03-20T10:00:00'),\n        endDate: new Date('2024-03-20T20:00:00'),\n        location: 'Campus Grounds',\n        category: 'Cultural',\n        votes: { yes: 78, no: 23 },\n        hasConflict: true,\n        conflictReason: 'Overlaps with Midterm Examination Period',\n        status: 'voting',\n        feedback: []\n      },\n      {\n        id: 3,\n        title: 'Career Fair 2024',\n        description: 'Annual career fair with 50+ companies and organizations.',\n        proposedBy: 'Career Services',\n        userType: 'faculty',\n        startDate: new Date('2024-04-10T08:00:00'),\n        endDate: new Date('2024-04-10T16:00:00'),\n        location: 'Sports Complex',\n        category: 'Career',\n        votes: { yes: 89, no: 5 },\n        hasConflict: false,\n        status: 'approved',\n        feedback: []\n      }\n    ];\n  }\n}\n\nexport default new EventService();